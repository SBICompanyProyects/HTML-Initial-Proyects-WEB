/*
Otra forma de representar colores es el modelo HSL, siglas de hue, saturation y lightness (matiz, saturación y luminosidad).

La función de CSS hsl acepta tres valores: un número entre 0 y 360 para el matiz (hue), un porcentaje para la saturación (saturation), y otro porcentaje para la luminosidad (lightness).
*/
/*
se pueden aplicar transiciones de color, o gradientes, sobre un elemento.

Se llama gradiente, o degradado, a la transición progresiva de un color a otro. La función CSS linear-gradient permite controlar la dirección de la transición a lo largo de una línea, y qué colores participan en el degradado.

Una cosa a tener en cuenta es que la función linear-gradient lo que en realidad crea es un elemento image, y se asocia normalmente con la propiedad background, la cual puede aceptar una imagen como valor.
La función linear-gradient es muy flexible -- aquí hay una sintaxis básica que usaras en este tutorial:

linear-gradient(gradientDirection, color1, color2, ...);
gradientDirection es la dirección de la línea a lo largo de la cual tendrá lugar la transición. color1 y color2 son argumentos de color, representando los colores usados en la transición. Se pueden pasar a la función en cualquier formato, ya sea el nombre del color, hex, rgb o hsl.
La función linear-gradient necesita un mínimo de dos colores como argumentos, pero puede aceptar bastantes más.

Las paradas de color permiten afinar el emplazamiento de los colores a lo largo de la línea que sigue el gradiente. Se definen, en la función linear-gradient, mediante unidades de longitud, como px o porcentajes, a continuación del color del cual se quiere definir la parada.

Por ejemplo, en el gradiente que sigue, la transición del rojo al negro tiene lugar en el punto que representa el 90% de la línea del gradiente, de manera que el rojo ocupa la mayor parte del espacio disponible:

linear-gradient(90deg, red 90%, black);
Si en la función linear-gradient no se especifica el argumento gradientDirection, por defecto será de 180 grados, disponiendo los colores de arriba a abajo.
*/
/*
Opacity describe cuán opaco o no transparente es algo. Por ejemplo, una pared sólida es opaca y no puede pasar la luz. Pero un vaso para beber es mucho más transparente, y puedes ver a través del vaso hacia el otro lado.

Con la propiedad CSS opacity, puede controlar cuán opaco o transparente es un elemento. Con el valor 0, o 0%, el elemento será completamente transparente, y en 1.0, o 100%, el elemento será completamente opaco como lo es por defecto.
Otra forma de establecer la opacidad de un elemento es con el canal alpha. Similar a la propiedad opacity, el canal alfa controla qué tan transparente u opaco es un color.
*/
/*
Para agregar un canal alfa a un color rgb, use la función rgba en su lugar.

La función rgba funciona igual que la función rgb, pero toma un número más de 0 a 1.0 para el canal alfa:

rgba(redValue, greenValue, blueValue, alphaValue);
*/
/*
La propiedad abreviada border-left permite establecer el grosor, el estilo y el color del borde izquierdo de forma simultánea.

La sintaxis sería:

border-left: width style color;
*/
/*
La última cosa que haremos será añadir un ligero sombreado a cada marcador para hacerlos parecer aún más realistas.

La propiedad box-shadow permite aplicar una o más sombras alrededor de un elemento. Esta sería la sintaxis básica:

box-shadow: offsetX offsetY color;
Observa que los límites de la sombra son muy bruscos. En la propiedad box-shadow, se encuentra el valor opcional blurRadius:

box-shadow: offsetX offsetY blurRadius color;

Si no se indica un valor para blurRadius, será 0 por defecto, produciendo sombras con los límites bruscos. Cuanto mayor sea el valor de blurRadius, mayor será el efecto de difuminado de la sombra.
Quieres expandir la sombra un poco más? Puedes hacerlo con el valor opcional spreadRadius:

box-shadow: offsetX offsetY blurRadius spreadRadius color;

Como blurRadius, el valor por defecto de spreadRadius es 0 si no se especifica.
*/
h1 {
    text-align: center;
}
.container {
    background-color: rgb(255, 255, 255);
    padding: 10px 0;
}
.marker {
    width: 200px;
    height: 25px;
    margin: 10px auto;
}
.cap {
    width: 60px;
    height: 25px;
}
.sleeve {
    width: 110px;
    height: 25px;
    background-color: rgba(255, 255, 255, 0.5);
    border-left: 10px double rgba(0, 0, 0, 0.75);
}
.cap, .sleeve {
    display: inline-block;
}
.red {
    background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
    box-shadow: 0 0 20px 0 rgba(83, 14, 14, 0.8);
}
.green {
    background: linear-gradient(#55680D, #71F53E, #116C31);
    box-shadow: 0 0 20px 0 #3B7E20CC;
}
.blue {
    background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
    box-shadow: 0 0 20px 0 hsla(223,59%,31%,0.8);
}